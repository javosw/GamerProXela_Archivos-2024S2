
software
	postgresql
	tomcat
	angular 

diagramas
	diagrama entidad-relacion (peter chen)
		para base de datos relacional

empleado
	debe tener un rol asignado
	
empresa 
	nombre: GamerProXela
	sucursales
		parque
		centro1
		centro2
	registros
		productos
			ubicacion en sucursal
				estanteria
				bodega: cada sucursal tiene una bodega
			(ficticio) tipos existentes
				en parque: 100
				en centro1: 75
				en centro2: 75
			sql
				agregar producto usando INSERT
				(ficticio) agregar productos a cada sucursal (estanteria y bodega)
		empleados
			roles
				cajero <- 1 sucursal
				bodega <- 1 sucursal
				inventario <- 1 sucursal
				administrador
			(ficticio) para cada sucursal
				6 rol cajero + 4 rol inventario + 1 rol bodega
			cada rol tiene diferente interfaz visual
			rol cajero
				1 cajero <- 1 caja
				(ficticio) en cada sucursal agregar 5 ventas
				venta
					id_factura: numero
					nit: numero | null
					cliente-nombre
					cajero-nombre
					productos: producto[]
						1-* productos
						cada producto puede tener descuento
					total
						sin descuento
						con descuento
					puntos
						1 pt = 1 quetzal
				cliente
					id_cliente: nit
				vistas
					new venta
					new cliente
					mod cliente
					new tarjeta
				add venta
					cada venta se realiza en la sucursal del rol cajero
				new cliente
					cada cliente debe estar disponible en todas las sucursales
				mod cliente
					se requiere usuario y contrasena de un rol administrador
				new tarjeta
			rol bodega
				vistas
					get productos (bodega/estanteria)
					new producto
				new producto
					aqui se crea un nuevo producto en Productos
					cada new se realiza en la sucursal del rol bodega
			rol inventario
				vistas
					add estanteria
					mod estanteria
				add estanteria
					aqui se <<disminuye>> los productos en <<bodega>> 
					y <<aumentan>> los productos de <<estanteria>>
					bodega.mod(producto,unidades) -> estanteria.new(producto,unidades,pasillo)
				mod estanteria
					tabla productos en sucursal (pasillos/bodega)
					bodega.mod(producto,unidades) -> estanteria.mod(producto,unidades,pasillo)
			rol administrador
				vistas
					reportes
					new trabajador
					mod tarjeta
				reportes
					descuentos por intervalo de tiempo
						group Descuento.fecha if Ventas.total_descuento > 0
					10 ventas mas grandes por intervalo de tiempo
						group Ventas.fecha
					2 sucursales con mas ingresos
						group Ventas.Sucursales.id_sucursal
					10 productos con mas unidades vendidas
						group ProductosFacturados.Productos.id_producto
					10 clientes que mas gastaron
						group Ventas.Clientes.nit
				new trabajador
				mod tarjeta
					nivel comun
						requisitos: solicitud
						5 pt / 200
					nivel oro
						requisitos: 10000 + tarjeta comun
						10 pt / 200
					nivel platino
						requisitos: 20000 + tarjeta oro
						20 pt / 200
					nivel diamante
						requisitos: 30000 + tarjeta platino
						30 pt / 200
		sucursales
		clientes
			(ficticio) 8 clientes
			cada cliente puede tener <<una>> tarjeta 
				pero con sus compras puede el nivel de la tarjeta cambia
		relaciones
			1 empleado / 1 sucursal
				operaciones: new empleado, mod empleado

sucursal { empleados:empleado[] }


reglas del negocio
	cada producto facturado requiere la dependencia
		producto <- estanteria <- caja
	Productos.en_estanteria = GRUPO->SUMA(Estanteria.en_pasillo SI Sucursales.id_sucursal)

triggers
	usar triggers para cambiar el nivel de tarjeta

aclaraciones
	quien crea la nivel comun? el cajero | el admin ?

preguntas

b--------------------------------------------------
 DICCIONARIO

collate:
	to collect, compare carefully in order to verify, and often to integrate or arrange in order
	to assemble in proper order

 DICCIONARIO
b--------------------------------------------------